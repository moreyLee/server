def Version(){
    return new Date().format('yyyy-MM-dd HH:mm')
}
pipeline {
    agent any
    environment {
        _version = Version()
    }
    stages {
        stage('打印环境变量'){
                steps{
                    script {
                        sh 'printenv'
                    }
                }
        }
        stage('拉取代码') {
            steps {
               checkout scmGit(branches: [[name: '*/master']], browser: github('https://github.com/moreyLee/game-api.git'), extensions: [], userRemoteConfigs: [[credentialsId: '5edb9434-b237-4bd7-a166-5d2c91d0ec8f', url: 'https://github.com/moreyLee/game-api.git']])
            }
        }
        stage('config.yaml配置文件替换为测试环境'){
            steps{
               configFileProvider([configFile(fileId: '41906e5e-6fcb-4825-b174-d855f0a900ab', targetLocation: 'conf/config.yaml')]) {
                    echo 'config.yaml 配置文件替换成功'
               }
            }
        }
        stage('dockerfile替换为测试环境'){
            steps{
              configFileProvider([configFile(fileId: 'ed3935e4-2fb5-4c34-87ea-74bef589d946', targetLocation: 'dockerfile')]) {
                    echo 'dockerfile 配置文件替换成功'
              }
            }
        }
        stage('构建代码'){
            steps{
                sh '''
                docker version
                echo "脚本日志解析器"
                ls -lh /bin/sh
                echo "容器中环境变量是否生效"
                source /etc/profile
                go version
                export GO111MODULE=on
                go build -o k8-game-api
                '''
            }
        }
        stage('构建镜像'){
            steps{
                sh '''
                docker build -t k8-game-api .
                '''
            }
        }
        stage('推送镜像'){
            steps{
                echo "时间戳\n+${_version}"
                echo "推送镜像到镜像仓库-登录"
                sh 'docker login -uadmin -pDevops%8 https://harbor.dev.com/'
                echo "镜像打标签 这步是必须的 推送至harbor "
                sh 'docker tag k8-game-api:latest harbor.dev.com/k8s/k8-game-api:latest'
                echo "推送到harbor"
                sh 'docker push harbor.dev.com/k8s/k8-game-api:latest'
                echo '清除镜像标签'
                sh 'docker rmi -f harbor.dev.com/k8s/k8-game-api:latest'
                echo '删除应用镜像'
                sh 'docker rmi -f k8-game-api:latest'
                echo '清理none 镜像'
//                 sh "docker images -a | grep none | awk '{ print $3}' | xargs docker rmi"

            }
        }
    }
}