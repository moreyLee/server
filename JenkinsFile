pipeline {
    agent any
    environment {
        build_file = "devops-api-${BUILD_NUMBER}.tar.gz" // 打包文件名称
        remote_path = '/home/wwwroot/devops'  // 测试环境远程路径
        ansible_host = 'csapi'
        timestamp = new Date().format("yyyyMMddHHmmss") // 使用当前时间戳
        NGROK_AUTHTOKEN = '2mTSsZEtshngMyg1VCvx6MGDrmo_64FmTnQ85nxbwWV2cmcLH'
        NGROK_URL = "orca-awaited-ibex.ngrok-free.app"
    }
    stages {
        stage('当前版本号') {
            steps {
                script {
                    echo "当前版本号：${build_file}"
                    echo "Jenkins 构建号: ${BUILD_NUMBER}"
                    echo "时间戳: ${timestamp}"
                }
            }
        }
        stage('清理项目目录代码环境') {
                    steps {
                        script {
                           echo "确保本地拉取的为最新代码"
                               sh """
                                   rm -r -f ./* || true
                               """
                               echo "本地环境清理完成"
                        }
                    }
                }
        stage('拉取代码') {
            steps {
                checkout([
                    $class: 'GitSCM',
                    branches: [[name: '*/master']],
                    doGenerateSubmoduleConfigurations: false,
                    extensions: [],
                    submoduleCfg: [],
                    userRemoteConfigs: [[
                        url: 'http://43.199.1.126:9099/david/devops-api.git',
                        credentialsId: 'f8424330-6e14-4f9b-bbe5-5726b6e97a88'
                    ]]
                ])
            }
        }
       stage('打包代码') {
             steps {
                   script{
                       sh """
                       tar --warning=no-file-changed  -zcf ${build_file}  ./  || true
                       """
                       echo "代码已打包为: ${build_file}"
                    }
             }
       }
       stage('验证打包') {
             steps {
               script{
                       def fileExists = sh(script: "test -f ${WORKSPACE}/${build_file}", returnStatus: true) == 0
                         if (!fileExists) {
                           error "打包失败：未找到文件 ${build_file}"
                       } else {
                           echo "打包成功：已打包文件 ${build_file} 存在"
                       }
                   }
             }
       }
       stage('上传到测试环境') {
            steps {
                  script{
                        echo "清理远程测试环境并上传新代码"
                        def workspace = pwd()
                        echo "Jenkins 工作目录: ${workspace}"
                        sh """
                              ansible-playbook -i /etc/ansible/hosts ./pipeline/deploy/upload_code.yml \
                              --extra-vars 'src_path=${workspace}/${build_file} dest_path=${remote_path} target_host=${ansible_host}'
                          """
                        echo "新代码文件上传完成"
                  }
            }
       }

       stage('构建项目依赖的 ocr 镜像') {
           steps {
              script {
                      echo "检查远程测试环境 OCR 镜像和容器状态"
                      sh """
                        ansible-playbook -i /etc/ansible/hosts ./pipeline/build/build_ocr.yml \
                        --extra-vars 'target_host=${ansible_host}'
                      """
                      echo "远程测试环境 OCR 服务检查完成"
              }
           }
       }
       stage('构建项目依赖的 selenium-chrome 镜像') {
          steps {
             script {
                     echo "检查远程测试环境 selenium-chrome 镜像和容器状态"
                     sh """
                       ansible-playbook -i /etc/ansible/hosts ./pipeline/build/build_selenium_chrome.yml \
                       --extra-vars 'target_host=${ansible_host}'
                     """
                     echo "远程测试环境 selenium-chrome 服务检查完成"
             }
          }
       }
       stage('构建项目依赖的 ngrok 镜像') {
         steps {
            script {
                    echo "检查远程测试环境 ngrok 镜像和容器状态"
                    sh """
                      ansible-playbook -i /etc/ansible/hosts ./pipeline/build/build_ngrok.yml \
                      --extra-vars 'target_host=${ansible_host} ngrok_token=${NGROK_AUTHTOKEN} ngrok_url=${NGROK_URL}'
                    """
                    echo "远程测试环境 ngrok 服务检查完成"
            }
         }
       }
       stage('远程构建镜像') {
          steps {
              script {
                      sh """
                          ansible-playbook -i /etc/ansible/hosts ./pipeline/build/build_docker.yml \
                          --extra-vars 'target_host=${ansible_host} dest_path=${remote_path} version=${BUILD_NUMBER} timestamp=${timestamp}'
                      """
                      echo "远程镜像构建完成"
              }
          }
      }
      stage('清理测试环境代码') {
                steps {
                    script {
                            echo "清理远程测试环境中的代码文件"
                            sh """
                                ansible-playbook -i /etc/ansible/hosts ./pipeline/deploy/cleanup_remote_code.yml \
                                --extra-vars 'target_host=${ansible_host} remote_path=${remote_path}'
                            """
                            echo "远程测试环境代码清理完成"
                    }
                }
            }
    }
}
